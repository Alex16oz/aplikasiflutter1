// lib/pages/schedule_page.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:testflut1/pages/repair_reports_page.dart';
import '../widgets/app_drawer.dart';

class SchedulePage extends StatefulWidget {
  const SchedulePage({super.key});
  static const String routeName = '/schedule';

  @override
  State<SchedulePage> createState() => _SchedulePageState();
}

class _SchedulePageState extends State<SchedulePage> {
  late Future<List<Map<String, dynamic>>> _schedulesFuture;
  final _supabase = Supabase.instance.client;
  String? _currentUserRole;
  Map<String, dynamic>? _initialDamageReport;

  bool _isInitialDialogShown = false;

  @override
  void initState() {
    super.initState();
    _schedulesFuture = _fetchSchedules();
  }

  // ===[ PERBAIKAN DIMULAI DI SINI ]===
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (!_isInitialDialogShown) {
      final routeArgs = ModalRoute.of(context)?.settings.arguments;
      Map<String, dynamic>? args;

      // Lakukan pengecekan tipe yang aman
      if (routeArgs is Map) {
        // Konversi map secara manual untuk memastikan tipe data yang benar
        args = Map<String, dynamic>.from(
            routeArgs.map((key, value) => MapEntry(key.toString(), value))
        );
      }

      // Ekstrak data dari argumen yang sudah aman
      _currentUserRole = args?['role'] ?? (args?['user']?['role']);

      if (args?['damage_report'] is Map) {
        _initialDamageReport = Map<String, dynamic>.from(args!['damage_report']);
      }

      if (_initialDamageReport != null) {
        _isInitialDialogShown = true; // Tandai agar tidak berjalan lagi
        // Panggil dialog setelah frame pertama selesai dibangun
        WidgetsBinding.instance.addPostFrameCallback((_) {
          if (mounted) {
            _showScheduleDialog(damageReport: _initialDamageReport);
          }
        });
      }
    }
  }
  // ===[ PERBAIKAN SELESAI DI SINI ]===

  Future<void> _refreshSchedules() async {
    setState(() {
      _schedulesFuture = _fetchSchedules();
    });
  }

  Future<List<Map<String, dynamic>>> _fetchSchedules() async {
    try {
      final response = await _supabase
          .rpc('get_schedules_with_details')
          .eq('is_archived', false)
          .order('schedule_date', ascending: false);

      if (response is! List) {
        return [];
      }
      return List<Map<String, dynamic>>.from(response);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
            content: Text("Error fetching schedules: $e"),
            backgroundColor: Colors.red));
      }
      return [];
    }
  }

  Future<void> _deleteSchedule(int scheduleId) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Konfirmasi Hapus'),
        content: const Text('Anda yakin ingin menghapus jadwal ini? Jadwal yang dibuat otomatis akan muncul lagi sesuai periodenya.'),
        actions: [
          TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('Batal')),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Hapus'),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      try {
        await _supabase.from('schedules').delete().eq('id', scheduleId);
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
              content: Text('Jadwal berhasil dihapus!'),
              backgroundColor: Colors.green));
          _refreshSchedules();
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(
              content: Text('Gagal menghapus jadwal: $e'),
              backgroundColor: Colors.red));
        }
      }
    }
  }

  Future<void> _showScheduleDialog(
      {Map<String, dynamic>? schedule,
        Map<String, dynamic>? damageReport}) async {

    final isAutoGenerated = (schedule?['task_description'] as String?)?.startsWith('[PERAWATAN]') ?? false;
    if (isAutoGenerated) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Jadwal perawatan otomatis tidak dapat diubah. Silakan ubah dari menu Jadwal Berkala.'),
        backgroundColor: Colors.orange,
      ));
      return;
    }

    final isEditing = schedule != null;

    showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(child: CircularProgressIndicator()));

    try {
      final responses = await Future.wait([
        _supabase.from('machines').select('id, machine_name'),
        _supabase.from('profiles').select('id, username').eq('role', 'Operator')
      ]);
      if(!mounted) return;
      Navigator.of(context).pop();

      final machinesData = responses[0] as List;
      final operatorsData = responses[1] as List;
      Set<String> selectedOperatorIds = {};

      if (isEditing) {
        final assignedOperatorsData = await _supabase.from('schedule_operators').select('operator_id').eq('schedule_id', schedule['schedule_id']);
        selectedOperatorIds = (assignedOperatorsData as List).map((row) => row['operator_id'] as String).toSet();
      }

      final formKey = GlobalKey<FormState>();
      int? currentMachineId = isEditing ? (schedule['machine_id'] as int?) : (damageReport?['machine_id'] as int?);
      final dateController = TextEditingController(text: isEditing ? (schedule['schedule_date'] ?? '') : '');
      final descriptionController = TextEditingController(text: isEditing ? (schedule['task_description'] ?? '') : (damageReport?['description'] ?? ''));

      await showDialog<bool>(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext dialogContext) {
          return StatefulBuilder(
            builder: (context, setDialogState) {
              return AlertDialog(
                title: Text(isEditing ? 'Edit Jadwal Perbaikan' : 'Buat Jadwal Perbaikan'),
                content: Form(
                  key: formKey,
                  child: SingleChildScrollView(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        DropdownButtonFormField<int>(
                          value: currentMachineId,
                          hint: const Text('Pilih Mesin'),
                          isExpanded: true,
                          items: (machinesData).map((m) => DropdownMenuItem<int>(
                              value: m['id'] as int,
                              child: Text(m['machine_name'] ?? 'Unknown'))).toList(),
                          onChanged: (value) => setDialogState(() => currentMachineId = value),
                          validator: (v) => v == null ? 'Mesin harus dipilih' : null,
                        ),
                        const SizedBox(height: 16),
                        TextFormField(
                          controller: dateController,
                          decoration: const InputDecoration(labelText: 'Tanggal Jadwal', suffixIcon: Icon(Icons.calendar_today)),
                          readOnly: true,
                          onTap: () async {
                            final picked = await showDatePicker(
                              context: context,
                              initialDate: dateController.text.isNotEmpty ? DateTime.parse(dateController.text) : DateTime.now(),
                              firstDate: DateTime(2020),
                              lastDate: DateTime(2100),
                            );
                            if (picked != null) {
                              dateController.text = DateFormat('yyyy-MM-dd').format(picked);
                            }
                          },
                          validator: (v) => v!.isEmpty ? 'Tanggal harus diisi' : null,
                        ),
                        const SizedBox(height: 16),
                        TextFormField(
                            controller: descriptionController,
                            decoration: const InputDecoration(labelText: 'Deskripsi Tugas'),
                            validator: (v) => v!.isEmpty ? 'Deskripsi harus diisi' : null),
                        const SizedBox(height: 24),
                        const Text('Alokasikan Operator', style: TextStyle(fontWeight: FontWeight.bold)),
                        const Divider(),
                        SizedBox(
                          height: 150,
                          width: double.maxFinite,
                          child: ListView(
                            children: (operatorsData).map((op) {
                              final operatorId = op['id'] as String;
                              return CheckboxListTile(
                                title: Text(op['username'] ?? 'Unknown Operator'),
                                value: selectedOperatorIds.contains(operatorId),
                                onChanged: (bool? value) {
                                  setDialogState(() {
                                    if (value == true) {
                                      selectedOperatorIds.add(operatorId);
                                    } else {
                                      selectedOperatorIds.remove(operatorId);
                                    }
                                  });
                                },
                              );
                            }).toList(),
                          ),
                        ),
                        if (selectedOperatorIds.isEmpty)
                          Padding(
                            padding: const EdgeInsets.only(top: 8.0),
                            child: Text('Pilih setidaknya satu operator', style: TextStyle(color: Theme.of(context).colorScheme.error, fontSize: 12)),
                          ),
                      ],
                    ),
                  ),
                ),
                actions: [
                  TextButton(onPressed: () => Navigator.of(context).pop(), child: const Text('Batal')),
                  ElevatedButton(
                    onPressed: () async {
                      if (formKey.currentState!.validate() && selectedOperatorIds.isNotEmpty) {
                        try {
                          final scheduleData = {
                            'machine_id': currentMachineId!,
                            'schedule_date': dateController.text,
                            'task_description': descriptionController.text.trim(),
                          };

                          if (isEditing) {
                            // LOGIKA EDIT
                            await _supabase.from('schedules').update(scheduleData).eq('id', schedule['schedule_id']);

                            await _supabase.from('schedule_operators').delete().eq('schedule_id', schedule['schedule_id']);
                            final operatorRecords = selectedOperatorIds.map((opId) => {
                              'schedule_id': schedule['schedule_id'],
                              'operator_id': opId
                            }).toList();
                            await _supabase.from('schedule_operators').insert(operatorRecords);
                          } else {
                            // LOGIKA BUAT BARU
                            final newSchedule = await _supabase.from('schedules').insert({
                              ...scheduleData,
                              'created_by': _supabase.auth.currentUser!.id,
                              'damage_report_id': damageReport?['id'],
                            }).select().single();
                            final newScheduleId = newSchedule['id'];

                            final operatorRecords = selectedOperatorIds.map((opId) => {
                              'schedule_id': newScheduleId,
                              'operator_id': opId
                            }).toList();
                            await _supabase.from('schedule_operators').insert(operatorRecords);

                            if (damageReport != null) {
                              await _supabase.from('damage_reports').update({'status': 'Scheduled'}).eq('id', damageReport['id']);
                              await _supabase.from('machines').update({'operational_status': 'perlu perbaikan'}).eq('id', damageReport['machine_id']);
                            }
                          }

                          if (mounted) {
                            ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                                content: Text('Jadwal berhasil ${isEditing ? 'diperbarui' : 'dibuat'}!'),
                                backgroundColor: Colors.green));
                            Navigator.of(dialogContext).pop(true); // Kirim 'true' untuk menandakan sukses
                          }
                        } catch (e) {
                          if (mounted) {
                            ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                                content: Text('Gagal menyimpan jadwal: $e'),
                                backgroundColor: Colors.red));
                          }
                        }
                      }
                    },
                    child: const Text('Simpan Jadwal'),
                  ),
                ],
              );
            },
          );
        },
      ).then((success) {
        if (success == true) {
          _refreshSchedules();
        }
      });
    } catch (e) {
      if(mounted) {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Error preparing form: $e"), backgroundColor: Colors.red));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final bool isAdmin = _currentUserRole == 'Admin';

    return Scaffold(
      appBar: AppBar(
        title: const Text('Jadwal Perawatan & Perbaikan'),
        actions: <Widget>[
          IconButton(onPressed: _refreshSchedules, icon: const Icon(Icons.refresh), tooltip: 'Refresh'),
          if (isAdmin)
            IconButton(
              icon: const Icon(Icons.add_task),
              tooltip: 'Buat Jadwal Perbaikan',
              onPressed: () => _showScheduleDialog(),
            ),
        ],
      ),
      drawer: const AppDrawer(),
      body: RefreshIndicator(
        onRefresh: _refreshSchedules,
        child: FutureBuilder<List<Map<String, dynamic>>>(
          future: _schedulesFuture,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }
            if (snapshot.hasError) {
              return Center(child: Text('Error: ${snapshot.error}'));
            }
            if (!snapshot.hasData || snapshot.data!.isEmpty) {
              return const Center(child: Text('Tidak ada jadwal aktif.'));
            }
            final schedules = snapshot.data!;
            return SingleChildScrollView(
              physics: const AlwaysScrollableScrollPhysics(),
              padding: const EdgeInsets.all(16.0),
              child: DataTable(
                headingRowColor: WidgetStateProperty.resolveWith((states) => Colors.blueGrey.shade100),
                border: TableBorder.all(color: Colors.grey.shade400, width: 1, borderRadius: BorderRadius.circular(8.0)),
                columns: const <DataColumn>[
                  DataColumn(label: Text('Aktivitas', style: TextStyle(fontWeight: FontWeight.bold))),
                  DataColumn(label: Text('Mesin', style: TextStyle(fontWeight: FontWeight.bold))),
                  DataColumn(label: Text('Operator', style: TextStyle(fontWeight: FontWeight.bold))),
                  DataColumn(label: Text('Status', style: TextStyle(fontWeight: FontWeight.bold))),
                  DataColumn(label: Text('Aksi', style: TextStyle(fontWeight: FontWeight.bold))),
                ],
                rows: schedules.map((schedule) {
                  final operatorNames = List<String>.from(schedule['operator_names'] ?? []);
                  final scheduleStatus = schedule['status'] ?? 'Dijadwalkan';
                  final taskDescription = schedule['task_description'] as String? ?? 'N/A';
                  final isAutoGenerated = taskDescription.startsWith('[PERAWATAN]');

                  return DataRow(
                    cells: <DataCell>[
                      DataCell(
                        Row(
                          children: [
                            Icon(
                              isAutoGenerated ? Icons.event_repeat_outlined : Icons.build_circle_outlined,
                              size: 18,
                              color: isAutoGenerated ? Colors.purple : Colors.orange,
                            ),
                            const SizedBox(width: 8),
                            Expanded(child: Text(
                                '${DateFormat('dd MMM yy').format(DateTime.parse(schedule['schedule_date']))}\n$taskDescription',
                                maxLines: 3,
                                overflow: TextOverflow.ellipsis
                            )),
                          ],
                        ),
                      ),
                      DataCell(Text(schedule['machine_name'] ?? 'N/A')),
                      DataCell(Text(operatorNames.isNotEmpty ? operatorNames.join(', ') : 'Belum dialokasikan')),
                      DataCell(
                        Chip(
                          label: Text(scheduleStatus, style: const TextStyle(color: Colors.black87)),
                          backgroundColor: _getStatusColor(scheduleStatus),
                          padding: const EdgeInsets.symmetric(horizontal: 8),
                        ),
                      ),
                      DataCell(Row(
                        children: [
                          if (scheduleStatus == 'Selesai' || scheduleStatus == 'Terverifikasi')
                            IconButton(
                              icon: Icon(Icons.description_outlined, size: 20, color: Colors.teal.shade700),
                              tooltip: 'Lihat Laporan Perbaikan',
                              onPressed: () {
                                Navigator.push(context, MaterialPageRoute(builder: (context) => RepairReportsPage(scheduleId: schedule['schedule_id']))).then((_) => _refreshSchedules());
                              },
                            )
                          else if (isAdmin && !isAutoGenerated)
                            IconButton(
                              icon: Icon(Icons.edit, size: 20, color: Colors.blue.shade700),
                              tooltip: 'Edit Jadwal',
                              onPressed: () => _showScheduleDialog(schedule: schedule),
                            ),
                          if (isAdmin && (scheduleStatus == 'Dijadwalkan' || scheduleStatus == 'Scheduled'))
                            IconButton(
                              icon: Icon(Icons.delete, size: 20, color: Colors.red.shade700),
                              tooltip: 'Hapus Jadwal',
                              onPressed: () => _deleteSchedule(schedule['schedule_id']),
                            ),
                        ],
                      )),
                    ],
                  );
                }).toList(),
              ),
            );
          },
        ),
      ),
    );
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case 'Selesai':
        return Colors.lightBlue.shade100;
      case 'Terverifikasi':
        return Colors.green.shade100;
      case 'Scheduled':
      case 'Dijadwalkan':
        return Colors.orange.shade100;
      default:
        return Colors.grey.shade200;
    }
  }
}